//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RestroomManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sdirecttestdbEntities1 : DbContext
    {
        public sdirecttestdbEntities1()
            : base("name=sdirecttestdbEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Checklist_Utility> Checklist_Utility { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<Utility> Utilities { get; set; }
    
        public virtual int INSERT_ChecklistUtility(Nullable<int> iD, Nullable<int> u_ID, Nullable<bool> isDone, string feedback, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, string createdBy, string modifiedBy, Nullable<System.DateTime> readingDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var u_IDParameter = u_ID.HasValue ?
                new ObjectParameter("U_ID", u_ID) :
                new ObjectParameter("U_ID", typeof(int));
    
            var isDoneParameter = isDone.HasValue ?
                new ObjectParameter("IsDone", isDone) :
                new ObjectParameter("IsDone", typeof(bool));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var readingDateParameter = readingDate.HasValue ?
                new ObjectParameter("ReadingDate", readingDate) :
                new ObjectParameter("ReadingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_ChecklistUtility", iDParameter, u_IDParameter, isDoneParameter, feedbackParameter, isDeletedParameter, isActiveParameter, createdDateParameter, modifiedDateParameter, createdByParameter, modifiedByParameter, readingDateParameter);
        }
    
        public virtual int INSERT_Utility(Nullable<int> iD, string name, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, string createdBy, string modifiedBy)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_Utility", iDParameter, nameParameter, isDeletedParameter, isActiveParameter, createdDateParameter, modifiedDateParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Utility_Report_Result> Utility_Report()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Utility_Report_Result>("Utility_Report");
        }
    }
}
